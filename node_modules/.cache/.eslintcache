[{"/home/will/Documents/react/Plotly3/src/index.js":"1","/home/will/Documents/react/Plotly3/src/reportWebVitals.js":"2","/home/will/Documents/react/Plotly3/src/App.js":"3","/home/will/Documents/react/Plotly3/src/Chart.js":"4","/home/will/Documents/react/Plotly3/src/Modal.js":"5"},{"size":500,"mtime":1621226970581,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1621226970581,"results":"8","hashOfConfig":"7"},{"size":1974,"mtime":1621226970581,"results":"9","hashOfConfig":"7"},{"size":5171,"mtime":1621226970581,"results":"10","hashOfConfig":"7"},{"size":1851,"mtime":1621226970581,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hde22v",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/will/Documents/react/Plotly3/src/index.js",[],"/home/will/Documents/react/Plotly3/src/reportWebVitals.js",[],"/home/will/Documents/react/Plotly3/src/App.js",["24","25"],"import './App.css';\nimport {useState, useEffect} from 'react';\nimport { Tabs, Tab, AppBar } from '@material-ui/core';\nimport * as d3 from 'd3'\nimport Chart from './Chart'\n\n\n\n\nfunction App() {\n\n  const[currentData, setCurrentData] = useState(false);\n  const[tabValue, setTabValue]= useState(0)\n  const handleTabs=(e, val) => {setTabValue(val);createPlotData(val);}\n\n  useEffect(() => {\n    createPlotData(0)\n  }, []);\n\n  async function createPlotData (tabIndex){\n    let year = []\n    let country = []\n    let mortality = []\n    let projectedWithoutWar = []\n    let projectedFromRecord = []\n    let miscData = []\n    \n      await d3.csv('/mortality4.csv', (d)=> {\n        if(d.index == tabIndex){\n          year.push(d.year)\n          country.push(d.country)\n          mortality.push(d.recordedRate) \n          projectedWithoutWar.push(d.projectedWithoutWar)\n          projectedFromRecord.push(d.projectedFromRecord)\n          \n          miscData.push(d.misc)\n        }})\n\n    setCurrentData({\n      year: year,\n      country:country[0],\n      mortality:mortality,\n      projectedWithoutWar:projectedWithoutWar,\n      projectedFromRecord:projectedFromRecord,\n      height:mortality[0],\n      yearsAdded:miscData[0],\n      start:miscData[1],\n      end:miscData[2],\n      bio:miscData[3],\n      bio2:miscData[4],\n      bio3:miscData[5],\n      conflictName:miscData[6]\n\n    })\n\n\n  }  \n\n    return (\n    <div className='container'>\n        <div>\n            <Tabs variant='scrollable'  centered align={'center'} value={tabValue} onChange={handleTabs}>\n              <Tab style={{maxWidth:10, color:'rgb(250,0,0)'}}label='The Idea'/>\n              <Tab label='Rwanda' />\n              <Tab label='Syria'/>\n              <Tab label='Afghanistan'/>\n              <Tab label='Bosnia and Herzegovina'/>\n              <Tab label='Iraq'/>\n            </Tabs>\n        </div>\n        <div >\n            <Chart plotData={currentData}/>\n        </div>\n    </div>\n  )\n}\n\nexport default App;\n","/home/will/Documents/react/Plotly3/src/Chart.js",["26","27","28","29","30","31","32"],"import React from 'react';\nimport Plot from 'react-plotly.js';\nimport './App.css'\nimport LinearScaleIcon from '@material-ui/icons/LinearScale';\nimport StopIcon from '@material-ui/icons/Stop';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport Modal from './Modal'\n\nconst Chart = ({plotData}) => {\nfunction contentSwitch() {\n   if(plotData.yearsAdded != 'false'){\n     return false\n} else{\n    return true\n}}\nfunction getPlotHeight() {\n    if(plotData.yearsAdded != 'false'){\n      return 450\n } else{\n     return 400\n }}\n const plotHeight = getPlotHeight()\nconst home = contentSwitch()\nconsole.log(home)\nconst trace1 = {\n    x: plotData.year,\n    y: plotData.mortality,\n    type: 'scatter',\n    mode: 'lines+markers',\n    name: 'linear',\n    line: {shape: 'spline'},\n    type: 'scatter'\n}\nconst trace2 = {\n    x: plotData.year,\n    y: plotData.projectedWithoutWar,\n    mode: 'lines+markers',\n}\nconst trace3 = {\n    x: plotData.year,\n    y: plotData.projectedFromRecord,\n    mode: 'lines+markers',\n    line:{color:\"#0000ff\"}\n}\nconst data = [trace1, trace2, trace3]\n\nfunction renderContent(){\n    if (!home){\n        return (\n        <div className='content'>\n            <div className='heading'>\n                <h1>{plotData.country}:</h1>\n            </div>\n            <div className='stats' >\n                <h2 style={{fontWeight:'normal'}}>Began:   </h2>\n                <h2>{plotData.start}</h2>\n                <h2 style={{fontWeight:\"normal\"}}> Ended:   </h2>\n                <h2>{plotData.end}</h2> \n                <h2 style={{fontWeight:\"normal\"}}> Years Added:</h2>\n                <h2>{plotData.yearsAdded}</h2>\n                <h2/><h2/><h2/>\n                <Modal bio={plotData.bio} title={plotData.conflictName} style={{marginRight:5}}/>\n            </div>\n            </div> \n            )\n        } else {\n            return <div className='introText' ><p>{plotData.bio}</p><p>{plotData.bio2}</p><p>{plotData.bio3}</p></div>\n        }\n    }\n\n    return (\n        <div>\n            \n            <div className='titleAndText'>\n                    {renderContent()}\n            </div>\n            \n            <div className='plot'>\n                <Plot \n                    data={data}\n                    layout={{\n                        shapes: [\n                            {\n                                type: 'rect',\n                                x0: plotData.start,\n                                y0: 0,\n                                x1: plotData.end,\n                                y1: plotData.height-5,\n                                fillcolor: 'FF0000',\n                                opacity: 0.2,\n                                line: 0,\n                                line:{\n                                    width:0\n                                }\n                            },{\n                                type: 'rect',\n                                x0: 1945,\n                                y0: 19,\n                                x1: 2029,\n                                y1: 20,\n                                fillcolor: '009900',\n                                opacity: 0.7,\n                                line:{\n                                    width:0\n                                }\n                            }\n                        ],\n                    height:plotHeight,\n                    width:'auto',\n                    paper_bgcolor: 'rgba(0,0,0,0)',\n                    plot_bgcolor: 'rgba(0,0,0,0)',  \n                    yaxis: {showgrid: false, \n                    range: [-10, Number(plotData.height)+10]}, \n                    xaxis: {showgrid: false}, \n                    title: false,\n                    \"showlegend\": false,\n                    margin: {\n                        l: 20,\n                        r: 20,\n                        b: 40,\n                        t: 1,\n                        pad: 5\n                      }\n                    }}\n                /> \n            </div>\n\n                    <div className='legendContainer'>\n                        <div className='legend'>\n                            <LinearScaleIcon fontSize=\"large\" style={{ color: 'rgb(30,80,255)' }}/>\n                            <h4>Recorded {home ? 'mortality':''}</h4>\n                        </div>\n                        <div className='legend'>\n                            <LinearScaleIcon fontSize=\"large\" style={{ color: 'rgb(255,200,0)' }}/>\n                            <h4>Projected {home ? 'mortality without war':''}</h4>\n                        </div>\n                        <div className='legend'>\n                            <StopIcon fontSize=\"large\" style={{ color: 'rgb(255,200,200)' }}/>\n                            <h4>{home ? 'time of ':''}Conflict</h4>\n                        </div>\n                        <div className='legend'>\n                            <RemoveIcon fontSize=\"large\" style={{ color: 'rgb(0,200,0)' }}/>\n                            <h4>Target:<br/>{home ? '20 Deaths/ 1000 Births':''}</h4>\n                        </div>\n                      \n                    </div>\n\n        </div>\n    )\n}\n\nexport default Chart\n\n\n\n","/home/will/Documents/react/Plotly3/src/Modal.js",[],{"ruleId":"33","severity":1,"message":"34","line":3,"column":21,"nodeType":"35","messageId":"36","endLine":3,"endColumn":27},{"ruleId":"37","severity":1,"message":"38","line":29,"column":20,"nodeType":"39","messageId":"40","endLine":29,"endColumn":22},{"ruleId":"37","severity":1,"message":"41","line":11,"column":27,"nodeType":"39","messageId":"40","endLine":11,"endColumn":29},{"ruleId":"37","severity":1,"message":"41","line":17,"column":28,"nodeType":"39","messageId":"40","endLine":17,"endColumn":30},{"ruleId":"42","severity":1,"message":"43","line":32,"column":5,"nodeType":"44","messageId":"40","endLine":32,"endColumn":9},{"ruleId":"45","severity":1,"message":"46","line":61,"column":17,"nodeType":"47","endLine":61,"endColumn":22},{"ruleId":"45","severity":1,"message":"46","line":61,"column":22,"nodeType":"47","endLine":61,"endColumn":27},{"ruleId":"45","severity":1,"message":"46","line":61,"column":27,"nodeType":"47","endLine":61,"endColumn":32},{"ruleId":"42","severity":1,"message":"48","line":92,"column":33,"nodeType":"44","messageId":"40","endLine":92,"endColumn":37},"no-unused-vars","'AppBar' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-dupe-keys","Duplicate key 'type'.","ObjectExpression","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","Duplicate key 'line'."]